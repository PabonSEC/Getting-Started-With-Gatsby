{"version":3,"sources":["webpack:///./src/components/PostListing/index.js","webpack:///./src/pages/posts.js"],"names":["PostListing","_React$Component","apply","arguments","_inheritsLoose","_proto","prototype","getPostList","postList","this","props","postEdges","forEach","postEdge","push","path","node","fields","slug","tags","frontmatter","featuredImage","title","date","excerpt","timeToRead","render","React","createElement","className","map","post","childImageSharp","fixed","Link","to","key","Img","Component","Posts","_this","call","state","filteredEdges","data","articles","edges","currentCategory","sidebarShown","toggleIcon","categoryFilter","categoryName","filteredCategory","filter","edge","category","toLowerCase","includes","setState","allPosts","toggleSidebar","postCategories","categories","group","isDark","context","Layout","Helmet","config","siteTitle","style","textAlign","color","onClick","FontAwesomeIcon","icon","faBars","faTimes","fontSize","fontWeight","faHandPointRight","marginLeft","totalCount","fieldValue","contextType","ThemeContext"],"mappings":"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","file":"component---src-pages-posts-js-f8a09d8e05d52ed439e8.js","sourcesContent":["import React from \"react\";\nimport { Link } from 'gatsby';\nimport './postlist.css';\nimport '../../styles/breakpoints.css';\nimport Img from 'gatsby-image';\n\nclass PostListing extends React.Component {\n\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        featuredImage: postEdge.node.frontmatter.featuredImage,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.frontmatter.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n  render() {\n    const postList = this.getPostList();\n    return (\n      <div className=\"posts\">\n\n        {postList.map(post => {\n\n          let featuredImage;\n\n          if (post.featuredImage) {\n            featuredImage = post.featuredImage.childImageSharp.fixed\n          }\n\n          return (\n            <Link to={post.path} key={post.title}>\n\n              {featuredImage ? <Img fixed={featuredImage} /> : <div />}\n\n              <div className=\"post-title\">\n                <h2>{post.title}</h2>\n                <small className=\"text-muted\">{post.date} . ☕️ {post.timeToRead} min read</small>\n              </div>\n\n            </Link>\n          )\n\n        }\n\n        )}\n      </div>\n    );\n  }\n}\n\nexport default PostListing;","import React from \"react\";\nimport Layout from '../layout';\nimport Helmet from 'react-helmet';\nimport config from '../data/config';\nimport PostListing from '../components/PostListing';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHandPointRight, faBars, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport '../styles/sidebar.css';\nimport '../styles/breakpoints.css';\nimport { graphql } from 'gatsby';\n\nimport { ThemeContext } from '../components/ThemeContext';\n\nclass Posts extends React.Component {\n  \n  static contextType = ThemeContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      filteredEdges: this.props.data.articles.edges,\n      currentCategory: '',\n      sidebarShown: true,\n      toggleIcon: true\n    }\n  }\n\n  categoryFilter(categoryName) {\n    // console.log(\"Category Clicked\");\n    // console.log(categoryName);\n\n    let filteredCategory = this.props.data.articles.edges.filter(edge =>\n      edge.node.frontmatter.category[0].toLowerCase().includes(categoryName.toLowerCase())\n    );\n\n    this.setState({\n      filteredEdges: filteredCategory,\n      currentCategory: categoryName\n    });\n  }\n\n  allPosts() {\n    this.setState({\n      filteredEdges: this.props.data.articles.edges,\n      currentCategory: ''\n    });\n  }\n\n  toggleSidebar() {\n    // console.log(\"Sidebar Clicked\");\n    this.setState({\n      sidebarShown: !this.state.sidebarShown,\n      toggleIcon: !this.state.toggleIcon\n    })\n  }\n\n  render() {\n    const postCategories = this.props.data.categories.group;\n    const postEdges = this.props.data.articles.edges;\n\n    const { isDark } = this.context;\n    // console.log(\"postEdges\");\n    // console.log(postEdges);\n    return (\n      <Layout>\n        <Helmet title={`Posts | ${config.siteTitle} – Software Engineer`} />\n        <div className=\"container\">\n\n          {\n            this.state.currentCategory && <h3 style={{\n              textAlign: 'center'\n            }}>Filtered Posts under <b style={{ color: 'rgb(26, 188, 156)' }}>\n                {this.state.currentCategory}</b> category\n            </h3>\n          }\n          <section>\n            <PostListing postEdges={this.state.filteredEdges} />\n          </section>\n\n          {/* Sidebar */}\n          <div className={`sidebar-circle ${this.state.sidebarShown ? 'sidebar-circle-position' : ''}`} onClick={() => {\n            this.toggleSidebar();\n          }}>\n            {!this.state.toggleIcon && <FontAwesomeIcon icon={faBars} />}\n            {this.state.toggleIcon && <FontAwesomeIcon icon={faTimes} />}\n          </div>\n          <div className={`sidebar ${!this.state.sidebarShown ? 'sidebar-toggle' : ''}\n            ${isDark ? 'isDarkBackground' : 'isNotDarkBackground'}`\n          }>\n            <p style={{\n              fontSize: '1.5em',\n              fontWeight: 'bold',\n              textAlign: 'center'\n            }}>Categories</p>\n\n            <div className=\"category-list\">\n              <p onClick={() => {\n                this.allPosts();\n              }}>\n                <FontAwesomeIcon icon={faHandPointRight} />\n                <span style={{\n                  marginLeft: 5\n                }}>\n                  All ({this.props.data.articles.totalCount})\n                </span>\n\n                <br />\n              </p>\n              {\n                postCategories.map(category => {\n\n                  return (\n\n                    <p key={category.fieldValue} onClick={() => {\n                      this.categoryFilter(category.fieldValue);\n                    }}>\n                      <FontAwesomeIcon icon={faHandPointRight} />\n                      <span style={{\n                        marginLeft: 5\n                      }}>\n                        {category.fieldValue} ({category.totalCount})\n                      </span>\n\n                      <br />\n                    </p>\n                  )\n\n                })\n              }\n\n            </div>\n          </div>\n          {/* Sidebar Ends*/}\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default Posts;\n\nexport const postsQuery = graphql`\nquery{\n    articles: allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] },\n      filter: { frontmatter: { template: { eq: \"post\" } } }\n    ) {\n    totalCount\n    edges {\n      node {\n        frontmatter {\n          template\n          title\n          featuredImage{\n            childImageSharp {\n              fixed(width: 40, height: 40) {\n                ...GatsbyImageSharpFixed\n              }\n            }\n          }\n          date(formatString: \"DD MMMM, YYYY\")\n          category\n          tags\n        }\n        excerpt\n        fields {\n          slug\n        }\n        timeToRead\n      }\n    }\n  }\n  categories: allMarkdownRemark(\n    sort: { order: DESC, fields: [frontmatter___date] },\n    filter: { frontmatter: { template: { eq: \"post\" } } }\n  ) {\n    group(limit: 500, field: frontmatter___category) {\n      totalCount\n      fieldValue\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n`;"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/components/PostListing/index.js","webpack:///./src/pages/posts.js"],"names":["PostListing","getPostList","postList","this","props","postEdges","forEach","postEdge","push","path","node","fields","slug","tags","frontmatter","featuredImage","title","date","excerpt","timeToRead","render","className","map","post","childImageSharp","fixed","to","key","React","Component","Posts","state","filteredEdges","data","articles","edges","currentCategory","sidebarShown","toggleIcon","categoryFilter","categoryName","filteredCategory","filter","edge","category","toLowerCase","includes","setState","allPosts","toggleSidebar","postCategories","categories","group","isDark","context","config","siteTitle","style","textAlign","color","onClick","icon","faBars","faTimes","fontSize","fontWeight","faHandPointRight","marginLeft","totalCount","fieldValue","contextType","ThemeContext"],"mappings":"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","file":"component---src-pages-posts-js-5873f1e9256c9a7cae02.js","sourcesContent":["import React from \"react\";\nimport { Link } from 'gatsby';\nimport './postlist.css';\nimport '../../styles/breakpoints.css';\nimport Img from 'gatsby-image';\n\nclass PostListing extends React.Component {\n\n  getPostList() {\n    const postList = [];\n    this.props.postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        featuredImage: postEdge.node.frontmatter.featuredImage,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.frontmatter.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      });\n    });\n    return postList;\n  }\n  render() {\n    const postList = this.getPostList();\n    return (\n      <div className=\"posts\">\n\n        {postList.map(post => {\n\n          let featuredImage;\n\n          if (post.featuredImage) {\n            featuredImage = post.featuredImage.childImageSharp.fixed\n          }\n\n          return (\n            <Link to={post.path} key={post.title}>\n\n              {featuredImage ? <Img fixed={featuredImage} /> : <div />}\n\n              <div className=\"post-title\">\n                <h2>{post.title}</h2>\n                <small className=\"text-muted\">{post.date} . ☕️ {post.timeToRead} min read</small>\n              </div>\n\n            </Link>\n          )\n\n        }\n\n        )}\n      </div>\n    );\n  }\n}\n\nexport default PostListing;","import React from \"react\";\nimport Layout from '../layout';\nimport Helmet from 'react-helmet';\nimport config from '../data/config';\nimport PostListing from '../components/PostListing';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHandPointRight, faBars, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport '../styles/sidebar.css';\nimport '../styles/breakpoints.css';\nimport { graphql } from 'gatsby';\n\nimport { ThemeContext } from '../components/ThemeContext';\n\nclass Posts extends React.Component {\n  \n  static contextType = ThemeContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      filteredEdges: this.props.data.articles.edges,\n      currentCategory: '',\n      sidebarShown: true,\n      toggleIcon: true\n    }\n  }\n\n  categoryFilter(categoryName) {\n    // console.log(\"Category Clicked\");\n    // console.log(categoryName);\n\n    let filteredCategory = this.props.data.articles.edges.filter(edge =>\n      edge.node.frontmatter.category[0].toLowerCase().includes(categoryName.toLowerCase())\n    );\n\n    this.setState({\n      filteredEdges: filteredCategory,\n      currentCategory: categoryName\n    });\n  }\n\n  allPosts() {\n    this.setState({\n      filteredEdges: this.props.data.articles.edges,\n      currentCategory: ''\n    });\n  }\n\n  toggleSidebar() {\n    // console.log(\"Sidebar Clicked\");\n    this.setState({\n      sidebarShown: !this.state.sidebarShown,\n      toggleIcon: !this.state.toggleIcon\n    })\n  }\n\n  render() {\n    const postCategories = this.props.data.categories.group;\n    const postEdges = this.props.data.articles.edges;\n\n    const { isDark } = this.context;\n    // console.log(\"postEdges\");\n    // console.log(postEdges);\n    return (\n      <Layout>\n        <Helmet title={`Posts | ${config.siteTitle} – Software Engineer`} />\n        <div className=\"container\">\n\n          {\n            this.state.currentCategory && <h3 style={{\n              textAlign: 'center'\n            }}>Filtered Posts under <b style={{ color: 'rgb(26, 188, 156)' }}>\n                {this.state.currentCategory}</b> category\n            </h3>\n          }\n          <section>\n            <PostListing postEdges={this.state.filteredEdges} />\n          </section>\n\n          {/* Sidebar */}\n          <div className={`sidebar-circle ${this.state.sidebarShown ? 'sidebar-circle-position' : ''}`} onClick={() => {\n            this.toggleSidebar();\n          }}>\n            {!this.state.toggleIcon && <FontAwesomeIcon icon={faBars} />}\n            {this.state.toggleIcon && <FontAwesomeIcon icon={faTimes} />}\n          </div>\n          <div className={`sidebar ${!this.state.sidebarShown ? 'sidebar-toggle' : ''}\n            ${isDark ? 'isDarkBackground' : 'isNotDarkBackground'}`\n          }>\n            <p style={{\n              fontSize: '1.5em',\n              fontWeight: 'bold',\n              textAlign: 'center'\n            }}>Categories</p>\n\n            <div className=\"category-list\">\n              <p onClick={() => {\n                this.allPosts();\n              }}>\n                <FontAwesomeIcon icon={faHandPointRight} />\n                <span style={{\n                  marginLeft: 5\n                }}>\n                  All ({this.props.data.articles.totalCount})\n                </span>\n\n                <br />\n              </p>\n              {\n                postCategories.map(category => {\n\n                  return (\n\n                    <p key={category.fieldValue} onClick={() => {\n                      this.categoryFilter(category.fieldValue);\n                    }}>\n                      <FontAwesomeIcon icon={faHandPointRight} />\n                      <span style={{\n                        marginLeft: 5\n                      }}>\n                        {category.fieldValue} ({category.totalCount})\n                      </span>\n\n                      <br />\n                    </p>\n                  )\n\n                })\n              }\n\n            </div>\n          </div>\n          {/* Sidebar Ends*/}\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default Posts;\n\nexport const postsQuery = graphql`\nquery{\n    articles: allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] },\n      filter: { frontmatter: { template: { eq: \"post\" } } }\n    ) {\n    totalCount\n    edges {\n      node {\n        frontmatter {\n          template\n          title\n          featuredImage{\n            childImageSharp {\n              fixed(width: 40, height: 40) {\n                ...GatsbyImageSharpFixed\n              }\n            }\n          }\n          date(formatString: \"DD MMMM, YYYY\")\n          category\n          tags\n        }\n        excerpt\n        fields {\n          slug\n        }\n        timeToRead\n      }\n    }\n  }\n  categories: allMarkdownRemark(\n    sort: { order: DESC, fields: [frontmatter___date] },\n    filter: { frontmatter: { template: { eq: \"post\" } } }\n  ) {\n    group(limit: 500, field: frontmatter___category) {\n      totalCount\n      fieldValue\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          title\n        }\n      }\n    }\n  }\n}\n`;"],"sourceRoot":""}